{ pkgs, ... }:

let 
  customPlugins.deoplete-ocaml = pkgs.vimUtils.buildVimPlugin {
    name = "deoplete-ocaml";
    src = pkgs.fetchFromGitHub {
      owner = "copy";
      repo = "deoplete-ocaml";
      rev = "d7e17ac3ea17c2da0d3b265d33ef83f347db5a1a";
      sha256 = "0wzrffw73ps5041fzprkr0ka4609ni31brij9s6mdrlk11n8yjli";
    };
  };
in

{
  programs.neovim = {
    enable = true;
    viAlias = true;
    vimAlias = true;

    plugins = [ 
      pkgs.vimPlugins.lightline-vim 
      pkgs.vimPlugins.nerdtree
      pkgs.vimPlugins.gitgutter
      pkgs.vimPlugins.auto-pairs
      pkgs.vimPlugins.fzf-vim

      pkgs.vimPlugins.deoplete-nvim
      pkgs.vimPlugins.deoplete-clang
      pkgs.vimPlugins.deoplete-go
      customPlugins.deoplete-ocaml
      pkgs.vimPlugins.deoplete-rust
      pkgs.vimPlugins.neoinclude
      pkgs.vimPlugins.neomake

      # pkgs.vimPlugins.haskell-vim
      # pkgs.vimPlugins.stylish-haskell
      # pkgs.vimPlugins.intero-neovim
    ];

    extraConfig = ''
      set noshowmode
      set number relativenumber
      set expandtab
      set cursorline
      
      " lightline-vim
      "
      let g:lightline = {
        \ 'colorscheme':'wombat',
        \ }
      
      " nerdtree
      "
      map <C-n> :NERDTreeToggle<CR>
      let g:NERDTreeDirArrowExpandable = '▸'
      let g:NERDTreeDirArrowCollapsible = '▾'
      
      " gitgutter
      "

      " auto-pairs
      "

      " deoplete-nvim
      "
      let g:deoplete#enable_at_startup = 1
      let g:deoplete#complete_method = "complete"
      let g:deoplete#ignore_sources = {}
      let g:deoplete#auto_complete_delay = 0

      " deoplete-clang
      "

      " deoplete-go
      "

      " deoplete-ocaml
      "
      let g:deoplete#ignore_sources.ocaml = [ 'buffer', 'around', 'member', 'tag' ]

      " deoplete-rust
      "
      let g:deoplete#source#rust#show_duplicates = 1
      let g:deoplete#source#rust#disable_keymap = 1
      let g:deoplete#source#rust#documentation_max_height = 20
      
      nmap <buffer> gd <plug>DeopleteRustGoToDefinitionDefault
      nmap <buffer> K  <plug>DeopleteRustShowDocumentation

      " neoinclude
      "

      " neomake
      "
      function! MyOnBattery()
        if has('macunix')
          return match(system('pmset -g batt'), "Now drawing from 'Battery Power'") != 1
        elsif has('unix')
          return readfile('/sys/class/power_supply/AC/online') == ['0']
        endif
        return 0
      endfunction

      if MyOnBattery()
        call neomake#configure#automake('w')
      else
        call neomake#configure#automake('nw', 1000)
      endif

      let g:neomake_open_list = 2

      " haskell-vim
      "
      let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
      let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
      let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
      let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
      let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
      let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
      let g:haskell_backpack = 1                " to enable highlighting of backpack keywords

      let g:haskell_indent_if = 3
      let g:haskell_indent_case = 2
      let g:haskell_indent_let = 4
      let g:haskell_indent_where = 6
      let g:haskell_indent_before_where = 2
      let g:haskell_indent_after_bare_where = 2
      let g:haskell_indent_do = 3
      let g:haskell_indent_in = 1
      let g:haskell_indent_case_alternative = 1
      let g:cabal_indent_section = 2

      " stylish-haskell
      "

      " intero-neovim
      "
      augroup interoMaps
        au!
        " Maps for intero. Restrict to Haskell buffers so the bindings don't collide.

        " Background process and window management
        au FileType haskell nnoremap <silent> <leader>is :InteroStart<CR>
        au FileType haskell nnoremap <silent> <leader>ik :InteroKill<CR>

        " Open intero/GHCi split horizontally
        au FileType haskell nnoremap <silent> <leader>io :InteroOpen<CR>
        " Open intero/GHCi split vertically
        au FileType haskell nnoremap <silent> <leader>iov :InteroOpen<CR><C-W>H
        au FileType haskell nnoremap <silent> <leader>ih :InteroHide<CR>

        " Reloading (pick one)
        " Automatically reload on save
        au BufWritePost *.hs InteroReload
        " Manually save and reload
        au FileType haskell nnoremap <silent> <leader>wr :w \| :InteroReload<CR>

        " Load individual modules
        au FileType haskell nnoremap <silent> <leader>il :InteroLoadCurrentModule<CR>
        au FileType haskell nnoremap <silent> <leader>if :InteroLoadCurrentFile<CR>

        " Type-related information
        " Heads up! These next two differ from the rest.
        au FileType haskell map <silent> <leader>t <Plug>InteroGenericType
        au FileType haskell map <silent> <leader>T <Plug>InteroType
        au FileType haskell nnoremap <silent> <leader>it :InteroTypeInsert<CR>

        " Navigation
        au FileType haskell nnoremap <silent> <leader>jd :InteroGoToDef<CR>

        " Managing targets
        " Prompts you to enter targets (no silent):
        au FileType haskell nnoremap <leader>ist :InteroSetTargets<SPACE>
      augroup END

      " Intero starts automatically. Set this if you'd like to prevent that.
      let g:intero_start_immediately = 0

      " Enable type information on hover (when holding cursor at point for ~1 second).
      let g:intero_type_on_hover = 1

      " Change the intero window size; default is 10.
      let g:intero_window_size = 15

      " Sets the intero window to split vertically; default is horizontal
      let g:intero_vertical_split = 1

      " OPTIONAL: Make the update time shorter, so the type info will trigger faster.
      set updatetime=1000
    '';
  };
}
